{"ast":null,"code":"var _jsxFileName = \"U:\\\\Java\\\\WaverApp\\\\frontend\\\\src\\\\Components\\\\WaveFeed.js\";\nimport React, { Component } from 'react';\nimport * as apiCalls from '../api/apiCalls';\nimport Spinner from './Spinner';\nimport WaveView from './WaveView';\nimport Modal from './Modal';\n\nclass WaveFeed extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      page: {\n        content: []\n      },\n      isLoadingWaves: false,\n      newWaveCount: 0,\n      isLoadingOldWaves: false,\n      isLoadingNewWaves: false,\n      modalVisible: false,\n      waveToBeDeleted: undefined\n    };\n\n    this.checkCount = () => {\n      const waves = this.state.page.content;\n      let topWaveId = 0;\n\n      if (waves.length > 0) {\n        topWaveId = waves[0].id;\n      }\n\n      apiCalls.loadNewWaveCount(topWaveId, this.props.user).then(response => {\n        this.setState({\n          newWaveCount: response.data.count\n        });\n      });\n    };\n\n    this.onClickLoadMore = () => {\n      const waves = this.state.page.content;\n\n      if (waves.length === 0) {\n        return;\n      }\n\n      const waveAtBottom = waves[waves.length - 1];\n      this.setState({\n        isLoadingOldWaves: true\n      });\n      apiCalls.loadOldWaves(waveAtBottom.id, this.props.user).then(response => {\n        const page = { ...this.state.page\n        };\n        page.content = [...page.content, ...response.data.content];\n        page.last = response.data.last;\n        this.setState({\n          page,\n          isLoadingOldWaves: false\n        });\n      }).catch(error => {\n        this.setState({\n          isLoadingOldWaves: false\n        });\n      });\n    };\n\n    this.onClickLoadNew = () => {\n      const waves = this.state.page.content;\n      let topWaveId = 0;\n\n      if (waves.length > 0) {\n        topWaveId = waves[0].id;\n      }\n\n      this.setState({\n        isLoadingNewWaves: true\n      });\n      apiCalls.loadNewWaves(topWaveId, this.props.user).then(response => {\n        const page = { ...this.state.page\n        };\n        page.content = [...response.data, ...page.content];\n        this.setState({\n          page,\n          newWaveCount: 0,\n          isLoadingNewWaves: false\n        });\n      }).catch(error => {\n        this.setState({\n          isLoadingNewWaves: false\n        });\n      });\n    };\n\n    this.onClickDeleteWave = wave => {\n      this.setState({\n        waveToBeDeleted: wave\n      });\n    };\n\n    this.onClickModalCancel = () => {\n      this.setState({\n        waveToBeDeleted: undefined\n      });\n    };\n\n    this.onClickModalOk = () => {\n      apiCalls.deleteWave(this.state.waveToBeDeleted.id).then(response => {\n        const page = { ...this.state.page\n        };\n        page.content = page.content.filter(wave => wave.id !== this.state.waveToBeDeleted.id);\n        this.setState({\n          waveToBeDeleted: undefined,\n          page\n        });\n      });\n    };\n  }\n\n  componentDidMount() {\n    this.setState({\n      isLoadingWaves: true\n    });\n    apiCalls.loadWaves(this.props.user).then(response => {\n      this.setState({\n        page: response.data,\n        isLoadingWaves: false\n      }, () => {\n        this.counter = setInterval(this.checkCount, 3000);\n      });\n    });\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.counter);\n  }\n\n  render() {\n    if (this.state.isLoadingWaves) {\n      return React.createElement(Spinner, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 107\n        },\n        __self: this\n      });\n    }\n\n    if (this.state.page.content.length === 0 && this.state.newWaveCount === 0) {\n      return React.createElement(\"div\", {\n        className: \"card card-header text-center\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 111\n        },\n        __self: this\n      }, \"There are no waves\");\n    }\n\n    const newWaveCountMessage = this.state.newWaveCount === 1 ? 'There is 1 new wave' : `There are ${this.state.newWaveCount} new waves`;\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 119\n      },\n      __self: this\n    }, this.state.newWaveCount > 0 && React.createElement(\"div\", {\n      className: \"card card-header text-center\",\n      onClick: !this.state.isLoadingNewWaves && this.onClickLoadNew,\n      style: {\n        cursor: this.state.isLoadingNewWaves ? 'not-allowed' : 'pointer'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 121\n      },\n      __self: this\n    }, this.state.isLoadingNewWaves ? React.createElement(Spinner, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 126\n      },\n      __self: this\n    }) : newWaveCountMessage), this.state.page.content.map(wave => {\n      return React.createElement(WaveView, {\n        key: wave.id,\n        wave: wave,\n        onClickDelete: () => this.onClickDeleteWave(wave),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 131\n        },\n        __self: this\n      });\n    }), this.state.page.last === false && React.createElement(\"div\", {\n      className: \"card card-header text-center\",\n      onClick: !this.state.isLoadingOldWaves && this.onClickLoadMore,\n      style: {\n        cursor: this.state.isLoadingOldWaves ? 'not-allowed' : 'pointer'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 134\n      },\n      __self: this\n    }, this.state.isLoadingOldWaves ? React.createElement(Spinner, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 139\n      },\n      __self: this\n    }) : 'Load More'), React.createElement(Modal, {\n      visible: this.state.waveToBeDeleted && true,\n      onClickCancel: this.onClickModalCancel,\n      body: this.state.waveToBeDeleted && `Are you sure you want to extinguish '${this.state.waveToBeDeleted.content}'?`,\n      title: \"Extinguish!\",\n      okButton: \"Extinguish Wave\",\n      onClickOk: this.onClickModalOk,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 142\n      },\n      __self: this\n    }));\n  }\n\n}\n\nexport default WaveFeed;","map":{"version":3,"sources":["U:/Java/WaverApp/frontend/src/Components/WaveFeed.js"],"names":["React","Component","apiCalls","Spinner","WaveView","Modal","WaveFeed","state","page","content","isLoadingWaves","newWaveCount","isLoadingOldWaves","isLoadingNewWaves","modalVisible","waveToBeDeleted","undefined","checkCount","waves","topWaveId","length","id","loadNewWaveCount","props","user","then","response","setState","data","count","onClickLoadMore","waveAtBottom","loadOldWaves","last","catch","error","onClickLoadNew","loadNewWaves","onClickDeleteWave","wave","onClickModalCancel","onClickModalOk","deleteWave","filter","componentDidMount","loadWaves","counter","setInterval","componentWillUnmount","clearInterval","render","newWaveCountMessage","cursor","map"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\n\r\nimport * as apiCalls from '../api/apiCalls';\r\nimport Spinner from './Spinner';\r\nimport WaveView from './WaveView';\r\nimport Modal from './Modal';\r\n\r\nclass WaveFeed extends Component {\r\n\r\n    state = {\r\n        page:{\r\n            content: []\r\n        },\r\n        isLoadingWaves: false,\r\n        newWaveCount: 0,\r\n        isLoadingOldWaves: false,\r\n        isLoadingNewWaves: false,\r\n        modalVisible: false,\r\n        waveToBeDeleted: undefined,\r\n    }\r\n\r\n    componentDidMount(){\r\n        this.setState({isLoadingWaves: true})\r\n        apiCalls.loadWaves(this.props.user)\r\n            .then(response => {\r\n                this.setState(\r\n                    {page: response.data, isLoadingWaves: false},\r\n                    () => {\r\n                        this.counter = setInterval(this.checkCount, 3000);\r\n                    }    \r\n                );\r\n            });\r\n    }\r\n\r\n    componentWillUnmount(){\r\n        clearInterval(this.counter);\r\n    }\r\n\r\n    checkCount = () => {\r\n        const waves = this.state.page.content;\r\n        let topWaveId = 0;\r\n        if (waves.length > 0){\r\n            topWaveId = waves[0].id;\r\n        }\r\n        apiCalls.loadNewWaveCount(topWaveId, this.props.user)\r\n            .then(response => {\r\n                this.setState({newWaveCount: response.data.count})\r\n            });\r\n    }\r\n\r\n    onClickLoadMore = () => {\r\n        const waves = this.state.page.content;\r\n        if (waves.length === 0){\r\n            return;\r\n        }\r\n        const waveAtBottom = waves[waves.length - 1];\r\n        this.setState({isLoadingOldWaves: true });\r\n        apiCalls.loadOldWaves(waveAtBottom.id, this.props.user)\r\n            .then(response => {\r\n                const page = {...this.state.page};\r\n                page.content = [...page.content, ...response.data.content];\r\n                page.last = response.data.last;\r\n                this.setState({page, isLoadingOldWaves: false});\r\n            })\r\n            .catch(error => {\r\n                this.setState({isLoadingOldWaves: false});\r\n            })\r\n    }\r\n\r\n    onClickLoadNew = () => {\r\n        const waves = this.state.page.content;\r\n        let topWaveId = 0;\r\n        if (waves.length > 0){\r\n            topWaveId = waves[0].id;\r\n        }\r\n        this.setState({isLoadingNewWaves: true})\r\n        apiCalls.loadNewWaves(topWaveId, this.props.user)\r\n            .then(response => {\r\n                const page = {...this.state.page};\r\n                page.content = [...response.data, ...page.content]\r\n                this.setState({ page, newWaveCount: 0, isLoadingNewWaves: false})\r\n            })\r\n            .catch(error => {\r\n                this.setState({isLoadingNewWaves: false});\r\n            })\r\n    }\r\n\r\n    onClickDeleteWave = (wave) => {\r\n        this.setState({ waveToBeDeleted: wave });\r\n    }\r\n\r\n    onClickModalCancel = () => {\r\n        this.setState({ waveToBeDeleted: undefined });\r\n    }\r\n\r\n    onClickModalOk = () => {\r\n        apiCalls.deleteWave(this.state.waveToBeDeleted.id)\r\n            .then(response => {\r\n                const page = {...this.state.page};\r\n                page.content = page.content.filter(wave => wave.id !== this.state.waveToBeDeleted.id);\r\n                this.setState({ waveToBeDeleted: undefined, page });\r\n            });\r\n    }\r\n\r\n    render() {\r\n        if (this.state.isLoadingWaves){\r\n            return (<Spinner/>);\r\n        }\r\n        if (this.state.page.content.length === 0 && this.state.newWaveCount === 0){\r\n            return (\r\n                <div className = \"card card-header text-center\">\r\n                    There are no waves\r\n                </div>\r\n            );\r\n        } \r\n        const newWaveCountMessage = this.state.newWaveCount === 1 \r\n        ? 'There is 1 new wave' \r\n        : `There are ${this.state.newWaveCount} new waves`\r\n        return <div>\r\n            {this.state.newWaveCount > 0 && (\r\n                <div \r\n                    className = \"card card-header text-center\"\r\n                    onClick = {!this.state.isLoadingNewWaves && this.onClickLoadNew}\r\n                    style = {{cursor: this.state.isLoadingNewWaves ? 'not-allowed' : 'pointer'}}\r\n                >\r\n                    {this.state.isLoadingNewWaves ? <Spinner/> : newWaveCountMessage }\r\n                    {}\r\n                </div>\r\n            )}\r\n            {this.state.page.content.map((wave) => {\r\n                return <WaveView key = {wave.id} wave = {wave} onClickDelete = {() => this.onClickDeleteWave(wave)}/>\r\n            })}\r\n            {this.state.page.last === false && (\r\n                <div \r\n                    className = \"card card-header text-center\"\r\n                    onClick = {!this.state.isLoadingOldWaves && this.onClickLoadMore}\r\n                    style = {{cursor: this.state.isLoadingOldWaves ? 'not-allowed' : 'pointer'}}\r\n                >\r\n                    {this.state.isLoadingOldWaves ? <Spinner/> : 'Load More'}\r\n                </div>\r\n            )}\r\n            <Modal \r\n                visible = {this.state.waveToBeDeleted && true}\r\n                onClickCancel = {this.onClickModalCancel}\r\n                body = {\r\n                    this.state.waveToBeDeleted && \r\n                    `Are you sure you want to extinguish '${this.state.waveToBeDeleted.content}'?`\r\n                }\r\n                title = \"Extinguish!\"\r\n                okButton = \"Extinguish Wave\"\r\n                onClickOk = {this.onClickModalOk}\r\n            />\r\n        </div>\r\n    }\r\n}\r\n\r\nexport default WaveFeed;"]},"metadata":{},"sourceType":"module"}