{"ast":null,"code":"var _jsxFileName = \"U:\\\\Java\\\\WaverApp\\\\frontend\\\\src\\\\Pages\\\\UserPage.js\";\nimport React from 'react';\nimport * as apiCalls from '../api/apiCalls';\nimport ProfileCard from '../Components/ProfileCard';\nimport { connect } from 'react-redux';\n\nclass UserPage extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      user: undefined,\n      userNotFound: false,\n      isLoadingUser: false,\n      inEditMode: false,\n      originalDisplayName: undefined,\n      pendingUpdateCall: false,\n      image: undefined,\n      errors: {}\n    };\n\n    this.componentDidMount = () => {\n      this.loadUser();\n    };\n\n    this.loadUser = () => {\n      const username = this.props.match.params.username;\n\n      if (!username) {\n        return;\n      }\n\n      this.setState({\n        userNotFound: false,\n        isLoadingUser: true\n      });\n      apiCalls.getUser(username).then(response => {\n        this.setState({\n          user: response.data,\n          isLoadingUser: false\n        });\n      }).catch(error => {\n        this.setState({\n          userNotFound: true,\n          isLoadingUser: false\n        });\n      });\n    };\n\n    this.componentDidUpdate = prevProps => {\n      if (prevProps.match.params.username !== this.props.match.params.username) {\n        this.loadUser();\n      }\n    };\n\n    this.onClickEdit = () => {\n      this.setState({\n        inEditMode: true\n      });\n    };\n\n    this.onClickCancel = () => {\n      const user = { ...this.state.user\n      };\n\n      if (this.state.originalDisplayName !== undefined) {\n        user.displayName = this.state.originalDisplayName;\n      }\n\n      this.setState({\n        inEditMode: false,\n        originalDisplayName: undefined,\n        user,\n        image: undefined\n      });\n    };\n\n    this.onClickSave = () => {\n      const userId = this.props.loggedInUser.id;\n      const userUpdate = {\n        displayName: this.state.user.displayName,\n        image: this.state.image && this.state.image.split(',')[1]\n      };\n      this.setState({\n        pendingUpdateCall: true\n      });\n      apiCalls.updateUser(userId, userUpdate).then(response => {\n        const user = { ...this.state.user\n        };\n        user.image = response.data.image;\n        this.setState({\n          inEditMode: false,\n          originalDisplayName: undefined,\n          pendingUpdateCall: false,\n          user,\n          image: undefined\n        });\n      }).catch(error => {\n        let errors = {};\n\n        if (error.response.data.validationErrors) {\n          errors = error.response.data.validationErrors;\n        }\n\n        this.setState({\n          pendingUpdateCall: false,\n          errors\n        });\n      });\n    };\n\n    this.onChangeDisplayName = event => {\n      const user = { ...this.state.user\n      };\n      let originalDisplayName = this.state.originalDisplayName;\n\n      if (originalDisplayName === undefined) {\n        originalDisplayName = user.displayName;\n      }\n\n      const errors = { ...this.state.errors\n      };\n      errors.displayName = undefined;\n      user.displayName = event.target.value;\n      this.setState({\n        user,\n        originalDisplayName,\n        errors\n      });\n    };\n\n    this.onFileSelect = event => {\n      if (event.target.files.length === 0) {\n        return;\n      }\n\n      const file = event.target.files[0];\n      let reader = new FileReader();\n\n      reader.onloadend = () => {\n        this.setState({\n          image: reader.result\n        });\n      };\n\n      reader.readAsDataURL(file);\n    };\n  }\n\n  render() {\n    let pageContent;\n\n    if (this.state.isLoadingUser) {\n      pageContent = React.createElement(\"div\", {\n        className: \"d-flex\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 121\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"spinner-border m-auto\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 122\n        },\n        __self: this\n      }, React.createElement(\"span\", {\n        className: \"sr-only\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 123\n        },\n        __self: this\n      }, \"Loading...\")));\n    } else if (this.state.userNotFound) {\n      pageContent = React.createElement(\"div\", {\n        className: \"alert alert-danger text-center\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 129\n        },\n        __self: this\n      }, React.createElement(\"h5\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 130\n        },\n        __self: this\n      }, \"User not found\"));\n    } else {\n      const isEditable = this.props.loggedInUser.username === this.props.match.params.username;\n      pageContent = this.state.user && React.createElement(ProfileCard, {\n        user: this.state.user,\n        isEditable: isEditable,\n        inEditMode: this.state.inEditMode,\n        onClickEdit: this.onClickEdit,\n        onClickCancel: this.onClickCancel,\n        onClickSave: this.onClickSave,\n        onChangeDisplayName: this.onChangeDisplayName,\n        pendingUpdateCall: this.state.pendingUpdateCall,\n        loadedImage: this.state.image,\n        onFileSelect: this.onFileSelect,\n        errors: this.state.errors,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 136\n        },\n        __self: this\n      });\n    }\n\n    return React.createElement(\"div\", {\n      \"data-testid\": \"userpage\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 151\n      },\n      __self: this\n    }, pageContent);\n  }\n\n}\n\nUserPage.defaultProps = {\n  match: {\n    params: {}\n  }\n};\n\nconst mapStateToProps = state => {\n  return {\n    loggedInUser: state\n  };\n};\n\nexport default connect(mapStateToProps)(UserPage);","map":{"version":3,"sources":["U:/Java/WaverApp/frontend/src/Pages/UserPage.js"],"names":["React","apiCalls","ProfileCard","connect","UserPage","Component","state","user","undefined","userNotFound","isLoadingUser","inEditMode","originalDisplayName","pendingUpdateCall","image","errors","componentDidMount","loadUser","username","props","match","params","setState","getUser","then","response","data","catch","error","componentDidUpdate","prevProps","onClickEdit","onClickCancel","displayName","onClickSave","userId","loggedInUser","id","userUpdate","split","updateUser","validationErrors","onChangeDisplayName","event","target","value","onFileSelect","files","length","file","reader","FileReader","onloadend","result","readAsDataURL","render","pageContent","isEditable","defaultProps","mapStateToProps"],"mappings":"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","sourcesContent":["import React from 'react';\r\n\r\nimport * as apiCalls from '../api/apiCalls';\r\nimport ProfileCard from '../Components/ProfileCard';\r\nimport { connect } from 'react-redux';\r\n\r\nclass UserPage extends React.Component {\r\n    \r\n    state = {\r\n        user: undefined,\r\n        userNotFound: false,\r\n        isLoadingUser: false,\r\n        inEditMode: false,\r\n        originalDisplayName: undefined,\r\n        pendingUpdateCall: false,\r\n        image: undefined,\r\n        errors: {}\r\n    }\r\n\r\n    componentDidMount = () => {\r\n        this.loadUser();\r\n    }\r\n\r\n    loadUser = () =>{\r\n        const username = this.props.match.params.username;\r\n        if (!username){\r\n            return;\r\n        }\r\n        this.setState({userNotFound: false, isLoadingUser: true})\r\n        apiCalls.getUser(username)\r\n            .then((response) => {\r\n                this.setState({user: response.data, isLoadingUser: false})\r\n            })\r\n            .catch(error => {\r\n                this.setState({userNotFound: true, isLoadingUser: false})\r\n            });\r\n    }\r\n    componentDidUpdate = (prevProps) => {\r\n        if(prevProps.match.params.username !== this.props.match.params.username){\r\n            this.loadUser();\r\n        }\r\n    }\r\n\r\n    onClickEdit = () => {\r\n        this.setState({inEditMode:true});\r\n    }\r\n\r\n    onClickCancel = () => {\r\n        const user = {...this.state.user};\r\n        if (this.state.originalDisplayName !== undefined){\r\n            user.displayName = this.state.originalDisplayName;\r\n        }\r\n        this.setState({\r\n            inEditMode: false,\r\n            originalDisplayName: undefined,\r\n            user,\r\n            image: undefined,\r\n        })\r\n    }\r\n\r\n    onClickSave = () => {\r\n        const userId = this.props.loggedInUser.id;\r\n        const userUpdate = {\r\n            displayName: this.state.user.displayName,\r\n            image: this.state.image && this.state.image.split(',')[1]\r\n        };\r\n        this.setState({pendingUpdateCall: true});\r\n        apiCalls.updateUser(userId, userUpdate)\r\n            .then(response => {\r\n                const user = {...this.state.user};\r\n                user.image = response.data.image;\r\n                this.setState({\r\n                    inEditMode: false,\r\n                    originalDisplayName: undefined,\r\n                    pendingUpdateCall: false,\r\n                    user,\r\n                    image: undefined,\r\n                });\r\n            })\r\n            .catch(error => {\r\n                let errors = {};\r\n                if (error.response.data.validationErrors){\r\n                    errors = error.response.data.validationErrors;\r\n                }\r\n                this.setState({\r\n                    pendingUpdateCall: false,\r\n                    errors\r\n                })\r\n            });\r\n    }\r\n\r\n    onChangeDisplayName = (event) => {\r\n        const user = {...this.state.user};\r\n        let originalDisplayName = this.state.originalDisplayName;\r\n        if (originalDisplayName === undefined){\r\n            originalDisplayName = user.displayName;\r\n        }\r\n        const errors = {...this.state.errors};\r\n        errors.displayName = undefined;\r\n        user.displayName = event.target.value;\r\n        this.setState({user, originalDisplayName, errors});\r\n    }\r\n\r\n    onFileSelect = (event) => {\r\n        if (event.target.files.length === 0){\r\n            return;\r\n        }\r\n        const file = event.target.files[0];\r\n        let reader = new FileReader();\r\n        reader.onloadend = () => {\r\n            this.setState({image: reader.result})\r\n        }\r\n        reader.readAsDataURL(file);\r\n    }\r\n\r\n    render(){\r\n        let pageContent;\r\n\r\n        if(this.state.isLoadingUser){\r\n            pageContent = (\r\n                <div className = \"d-flex\">\r\n                    <div className = \"spinner-border m-auto\">\r\n                        <span className = \"sr-only\">Loading...</span>\r\n                    </div>\r\n                </div>\r\n            );\r\n        } else if (this.state.userNotFound){\r\n            pageContent = (\r\n                <div className = \"alert alert-danger text-center\">\r\n                    <h5>User not found</h5>\r\n                </div>\r\n            );\r\n        } else {\r\n            const isEditable = this.props.loggedInUser.username === this.props.match.params.username;\r\n            pageContent = this.state.user && \r\n            <ProfileCard \r\n                user = {this.state.user} \r\n                isEditable = {isEditable} \r\n                inEditMode ={this.state.inEditMode}\r\n                onClickEdit = {this.onClickEdit}\r\n                onClickCancel = {this.onClickCancel}\r\n                onClickSave = {this.onClickSave}\r\n                onChangeDisplayName = {this.onChangeDisplayName}\r\n                pendingUpdateCall = {this.state.pendingUpdateCall}\r\n                loadedImage = {this.state.image}\r\n                onFileSelect = {this.onFileSelect}\r\n                errors = {this.state.errors}\r\n            />;\r\n        }\r\n        return(\r\n            <div data-testid = \"userpage\">\r\n                {pageContent}\r\n            </div>\r\n        );\r\n    };\r\n}\r\n\r\nUserPage.defaultProps = {\r\n    match: {\r\n        params: {}\r\n    }\r\n};\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        loggedInUser: state\r\n    }\r\n};\r\n\r\nexport default connect(mapStateToProps)(UserPage);"]},"metadata":{},"sourceType":"module"}