{"ast":null,"code":"var _jsxFileName = \"U:\\\\Java\\\\WaverApp\\\\frontend\\\\src\\\\Components\\\\WaveFeed.js\";\nimport React, { Component } from 'react';\nimport * as apiCalls from '../api/apiCalls';\nimport Spinner from './Spinner';\nimport WaveView from './WaveView';\n\nclass WaveFeed extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      page: {\n        content: []\n      },\n      isLoadingWaves: false,\n      newWaveCount: 0\n    };\n\n    this.checkCount = () => {\n      const waves = this.state.page.content;\n      let topWaveId = 0;\n\n      if (waves.length > 0) {\n        topWaveId = waves[0].id;\n      }\n\n      apiCalls.loadNewWaveCount(topWaveId, this.props.user).then(response => {\n        this.setState({\n          newWaveCount: response.data.count\n        });\n      });\n    };\n\n    this.onClickLoadMore = () => {\n      const waves = this.state.page.content;\n\n      if (waves.length === 0) {\n        return;\n      }\n\n      const waveAtBottom = waves[waves.length - 1];\n      apiCalls.loadOldWaves(waveAtBottom.id, this.props.user).then(response => {\n        const page = { ...this.state.page\n        };\n        page.content = [...page.content, ...response.data.content];\n        page.last = response.data.last;\n        this.setState({\n          page\n        });\n      });\n    };\n\n    this.onClickLoadNew = () => {\n      const waves = this.state.page.content;\n      let topWaveId = 0;\n\n      if (waves.length > 0) {\n        topWaveId = waves[0].id;\n      }\n\n      apiCalls.loadNewWaves(topWaveId, this.props.user);\n    };\n  }\n\n  componentDidMount() {\n    this.setState({\n      isLoadingWaves: true\n    });\n    apiCalls.loadWaves(this.props.user).then(response => {\n      this.setState({\n        page: response.data,\n        isLoadingWaves: false\n      }, () => {\n        this.counter = setInterval(this.checkCount, 3000);\n      });\n    });\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.counter);\n  }\n\n  render() {\n    if (this.state.isLoadingWaves) {\n      return React.createElement(Spinner, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 72\n        },\n        __self: this\n      });\n    }\n\n    if (this.state.page.content.length === 0 && this.state.newWaveCount === 0) {\n      return React.createElement(\"div\", {\n        className: \"card card-header text-center\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 76\n        },\n        __self: this\n      }, \"There are no waves\");\n    }\n\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81\n      },\n      __self: this\n    }, this.state.newWaveCount > 0 && React.createElement(\"div\", {\n      className: \"card card-header text-center\",\n      onClick: this.onClickLoadNew,\n      style: {\n        cursor: 'pointer'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83\n      },\n      __self: this\n    }, this.state.newWaveCount === 1 ? 'There is 1 new wave' : `There are ${this.state.newWaveCount} new waves`), this.state.page.content.map(wave => {\n      return React.createElement(WaveView, {\n        key: wave.id,\n        wave: wave,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 94\n        },\n        __self: this\n      });\n    }), this.state.page.last === false && React.createElement(\"div\", {\n      className: \"card card-header text-center\",\n      onClick: this.onClickLoadMore,\n      style: {\n        cursor: 'pointer'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 97\n      },\n      __self: this\n    }, \"Load More\"));\n  }\n\n}\n\nexport default WaveFeed;","map":{"version":3,"sources":["U:/Java/WaverApp/frontend/src/Components/WaveFeed.js"],"names":["React","Component","apiCalls","Spinner","WaveView","WaveFeed","state","page","content","isLoadingWaves","newWaveCount","checkCount","waves","topWaveId","length","id","loadNewWaveCount","props","user","then","response","setState","data","count","onClickLoadMore","waveAtBottom","loadOldWaves","last","onClickLoadNew","loadNewWaves","componentDidMount","loadWaves","counter","setInterval","componentWillUnmount","clearInterval","render","cursor","map","wave"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\n\r\nimport * as apiCalls from '../api/apiCalls';\r\nimport Spinner from './Spinner';\r\nimport WaveView from './WaveView';\r\n\r\nclass WaveFeed extends Component {\r\n\r\n    state = {\r\n        page:{\r\n            content: []\r\n        },\r\n        isLoadingWaves: false,\r\n        newWaveCount: 0,\r\n    }\r\n\r\n    componentDidMount(){\r\n        this.setState({isLoadingWaves: true})\r\n        apiCalls.loadWaves(this.props.user)\r\n            .then(response => {\r\n                this.setState(\r\n                    {page: response.data, isLoadingWaves: false},\r\n                    () => {\r\n                        this.counter = setInterval(this.checkCount, 3000);\r\n                    }    \r\n                );\r\n            });\r\n    }\r\n\r\n    componentWillUnmount(){\r\n        clearInterval(this.counter);\r\n    }\r\n\r\n    checkCount = () => {\r\n        const waves = this.state.page.content;\r\n        let topWaveId = 0;\r\n        if (waves.length > 0){\r\n            topWaveId = waves[0].id;\r\n        }\r\n        apiCalls.loadNewWaveCount(topWaveId, this.props.user)\r\n            .then(response => {\r\n                this.setState({newWaveCount: response.data.count})\r\n            });\r\n    }\r\n\r\n    onClickLoadMore = () => {\r\n        const waves = this.state.page.content;\r\n        if (waves.length === 0){\r\n            return;\r\n        }\r\n        const waveAtBottom = waves[waves.length - 1];\r\n        apiCalls.loadOldWaves(waveAtBottom.id, this.props.user)\r\n            .then(response => {\r\n                const page = {...this.state.page};\r\n                page.content = [...page.content, ...response.data.content];\r\n                page.last = response.data.last;\r\n                this.setState({page});\r\n            })\r\n    }\r\n\r\n    onClickLoadNew = () => {\r\n        const waves = this.state.page.content;\r\n        let topWaveId = 0;\r\n        if (waves.length > 0){\r\n            topWaveId = waves[0].id;\r\n        }\r\n        apiCalls.loadNewWaves(topWaveId, this.props.user);\r\n    }\r\n\r\n    render() {\r\n        if (this.state.isLoadingWaves){\r\n            return (<Spinner/>);\r\n        }\r\n        if (this.state.page.content.length === 0 && this.state.newWaveCount === 0){\r\n            return (\r\n                <div className = \"card card-header text-center\">\r\n                    There are no waves\r\n                </div>\r\n            );\r\n        } \r\n        return <div>\r\n            {this.state.newWaveCount > 0 && (\r\n                <div \r\n                    className = \"card card-header text-center\"\r\n                    onClick = {this.onClickLoadNew}\r\n                    style = {{cursor: 'pointer'}}\r\n                >\r\n                    {this.state.newWaveCount === 1 \r\n                        ? 'There is 1 new wave' \r\n                        : `There are ${this.state.newWaveCount} new waves`}\r\n                </div>\r\n            )}\r\n            {this.state.page.content.map((wave) => {\r\n                return <WaveView key = {wave.id} wave = {wave}/>\r\n            })}\r\n            {this.state.page.last === false && (\r\n                <div \r\n                    className = \"card card-header text-center\"\r\n                    onClick = {this.onClickLoadMore}\r\n                    style = {{cursor: 'pointer'}}\r\n                >\r\n                    Load More\r\n                </div>\r\n            )}\r\n        </div>\r\n    }\r\n}\r\n\r\nexport default WaveFeed;"]},"metadata":{},"sourceType":"module"}