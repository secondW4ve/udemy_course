{"ast":null,"code":"var _jsxFileName = \"U:\\\\Java\\\\WaverApp\\\\frontend\\\\src\\\\Pages\\\\UserPage.js\";\nimport React from 'react';\nimport * as apiCalls from '../api/apiCalls';\nimport ProfileCard from '../Components/ProfileCard';\nimport { connect } from 'react-redux';\n\nclass UserPage extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      user: undefined,\n      userNotFound: false,\n      isLoadingUser: false,\n      inEditMode: false,\n      originalDisplayName: undefined,\n      pendingUpdateCall: false,\n      image: undefined\n    };\n\n    this.componentDidMount = () => {\n      this.loadUser();\n    };\n\n    this.loadUser = () => {\n      const username = this.props.match.params.username;\n\n      if (!username) {\n        return;\n      }\n\n      this.setState({\n        userNotFound: false,\n        isLoadingUser: true\n      });\n      apiCalls.getUser(username).then(response => {\n        this.setState({\n          user: response.data,\n          isLoadingUser: false\n        });\n      }).catch(error => {\n        this.setState({\n          userNotFound: true,\n          isLoadingUser: false\n        });\n      });\n    };\n\n    this.componentDidUpdate = prevProps => {\n      if (prevProps.match.params.username !== this.props.match.params.username) {\n        this.loadUser();\n      }\n    };\n\n    this.onClickEdit = () => {\n      this.setState({\n        inEditMode: true\n      });\n    };\n\n    this.onClickCancel = () => {\n      const user = { ...this.state.user\n      };\n\n      if (this.state.originalDisplayName !== undefined) {\n        user.displayName = this.state.originalDisplayName;\n      }\n\n      this.setState({\n        inEditMode: false,\n        originalDisplayName: undefined,\n        user\n      });\n    };\n\n    this.onClickSave = () => {\n      const userId = this.props.loggedInUser.id;\n      const userUpdate = {\n        displayName: this.state.user.displayName\n      };\n      this.setState({\n        pendingUpdateCall: true\n      });\n      apiCalls.updateUser(userId, userUpdate).then(response => {\n        this.setState({\n          inEditMode: false,\n          originalDisplayName: undefined,\n          pendingUpdateCall: false\n        });\n      }).catch(error => {\n        this.setState({\n          pendingUpdateCall: false\n        });\n      });\n    };\n\n    this.onChangeDisplayName = event => {\n      const user = { ...this.state.user\n      };\n      let originalDisplayName = this.state.originalDisplayName;\n\n      if (originalDisplayName === undefined) {\n        originalDisplayName = user.displayName;\n      }\n\n      user.displayName = event.target.value;\n      this.setState({\n        user,\n        originalDisplayName\n      });\n    };\n  }\n\n  render() {\n    let pageContent;\n\n    if (this.state.isLoadingUser) {\n      pageContent = React.createElement(\"div\", {\n        className: \"d-flex\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 93\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"spinner-border m-auto\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 94\n        },\n        __self: this\n      }, React.createElement(\"span\", {\n        className: \"sr-only\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 95\n        },\n        __self: this\n      }, \"Loading...\")));\n    } else if (this.state.userNotFound) {\n      pageContent = React.createElement(\"div\", {\n        className: \"alert alert-danger text-center\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 101\n        },\n        __self: this\n      }, React.createElement(\"h5\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 102\n        },\n        __self: this\n      }, \"User not found\"));\n    } else {\n      const isEditable = this.props.loggedInUser.username === this.props.match.params.username;\n      pageContent = this.state.user && React.createElement(ProfileCard, {\n        user: this.state.user,\n        isEditable: isEditable,\n        inEditMode: this.state.inEditMode,\n        onClickEdit: this.onClickEdit,\n        onClickCancel: this.onClickCancel,\n        onClickSave: this.onClickSave,\n        onChangeDisplayName: this.onChangeDisplayName,\n        pendingUpdateCall: this.state.pendingUpdateCall,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 108\n        },\n        __self: this\n      });\n    }\n\n    return React.createElement(\"div\", {\n      \"data-testid\": \"userpage\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 120\n      },\n      __self: this\n    }, pageContent);\n  }\n\n}\n\nUserPage.defaultProps = {\n  match: {\n    params: {}\n  }\n};\n\nconst mapStateToProps = state => {\n  return {\n    loggedInUser: state\n  };\n};\n\nexport default connect(mapStateToProps)(UserPage);","map":{"version":3,"sources":["U:/Java/WaverApp/frontend/src/Pages/UserPage.js"],"names":["React","apiCalls","ProfileCard","connect","UserPage","Component","state","user","undefined","userNotFound","isLoadingUser","inEditMode","originalDisplayName","pendingUpdateCall","image","componentDidMount","loadUser","username","props","match","params","setState","getUser","then","response","data","catch","error","componentDidUpdate","prevProps","onClickEdit","onClickCancel","displayName","onClickSave","userId","loggedInUser","id","userUpdate","updateUser","onChangeDisplayName","event","target","value","render","pageContent","isEditable","defaultProps","mapStateToProps"],"mappings":"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","sourcesContent":["import React from 'react';\r\n\r\nimport * as apiCalls from '../api/apiCalls';\r\nimport ProfileCard from '../Components/ProfileCard';\r\nimport { connect } from 'react-redux';\r\n\r\nclass UserPage extends React.Component {\r\n    \r\n    state = {\r\n        user: undefined,\r\n        userNotFound: false,\r\n        isLoadingUser: false,\r\n        inEditMode: false,\r\n        originalDisplayName: undefined,\r\n        pendingUpdateCall: false,\r\n        image: undefined\r\n    }\r\n\r\n    componentDidMount = () => {\r\n        this.loadUser();\r\n    }\r\n\r\n    loadUser = () =>{\r\n        const username = this.props.match.params.username;\r\n        if (!username){\r\n            return;\r\n        }\r\n        this.setState({userNotFound: false, isLoadingUser: true})\r\n        apiCalls.getUser(username)\r\n            .then((response) => {\r\n                this.setState({user: response.data, isLoadingUser: false})\r\n            })\r\n            .catch(error => {\r\n                this.setState({userNotFound: true, isLoadingUser: false})\r\n            });\r\n    }\r\n    componentDidUpdate = (prevProps) => {\r\n        if(prevProps.match.params.username !== this.props.match.params.username){\r\n            this.loadUser();\r\n        }\r\n    }\r\n\r\n    onClickEdit = () => {\r\n        this.setState({inEditMode:true});\r\n    }\r\n\r\n    onClickCancel = () => {\r\n        const user = {...this.state.user};\r\n        if (this.state.originalDisplayName !== undefined){\r\n            user.displayName = this.state.originalDisplayName;\r\n        }\r\n        this.setState({\r\n            inEditMode: false,\r\n            originalDisplayName: undefined,\r\n            user\r\n        })\r\n    }\r\n\r\n    onClickSave = () => {\r\n        const userId = this.props.loggedInUser.id;\r\n        const userUpdate = {\r\n            displayName: this.state.user.displayName\r\n        }\r\n        this.setState({pendingUpdateCall: true});\r\n        apiCalls.updateUser(userId, userUpdate)\r\n            .then(response => {\r\n                this.setState({\r\n                    inEditMode: false,\r\n                    originalDisplayName: undefined,\r\n                    pendingUpdateCall: false,\r\n                });\r\n            })\r\n            .catch(error => {\r\n                this.setState({pendingUpdateCall: false})\r\n            });\r\n    }\r\n\r\n    onChangeDisplayName = (event) => {\r\n        const user = {...this.state.user};\r\n        let originalDisplayName = this.state.originalDisplayName;\r\n        if (originalDisplayName === undefined){\r\n            originalDisplayName = user.displayName;\r\n        }\r\n        user.displayName = event.target.value;\r\n        this.setState({user, originalDisplayName});\r\n    }\r\n\r\n    render(){\r\n        let pageContent;\r\n\r\n        if(this.state.isLoadingUser){\r\n            pageContent = (\r\n                <div className = \"d-flex\">\r\n                    <div className = \"spinner-border m-auto\">\r\n                        <span className = \"sr-only\">Loading...</span>\r\n                    </div>\r\n                </div>\r\n            );\r\n        } else if (this.state.userNotFound){\r\n            pageContent = (\r\n                <div className = \"alert alert-danger text-center\">\r\n                    <h5>User not found</h5>\r\n                </div>\r\n            );\r\n        } else {\r\n            const isEditable = this.props.loggedInUser.username === this.props.match.params.username;\r\n            pageContent = this.state.user && \r\n            <ProfileCard \r\n                user = {this.state.user} \r\n                isEditable = {isEditable} \r\n                inEditMode ={this.state.inEditMode}\r\n                onClickEdit = {this.onClickEdit}\r\n                onClickCancel = {this.onClickCancel}\r\n                onClickSave = {this.onClickSave}\r\n                onChangeDisplayName = {this.onChangeDisplayName}\r\n                pendingUpdateCall = {this.state.pendingUpdateCall}\r\n            />;\r\n        }\r\n        return(\r\n            <div data-testid = \"userpage\">\r\n                {pageContent}\r\n            </div>\r\n        );\r\n    };\r\n}\r\n\r\nUserPage.defaultProps = {\r\n    match: {\r\n        params: {}\r\n    }\r\n};\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        loggedInUser: state\r\n    }\r\n};\r\n\r\nexport default connect(mapStateToProps)(UserPage);"]},"metadata":{},"sourceType":"module"}