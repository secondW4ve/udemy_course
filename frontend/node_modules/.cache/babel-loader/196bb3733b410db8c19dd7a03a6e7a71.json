{"ast":null,"code":"var _jsxFileName = \"U:\\\\Java\\\\WaverApp\\\\frontend\\\\src\\\\Pages\\\\UserPage.js\";\nimport React from 'react';\nimport * as apiCalls from '../api/apiCalls';\nimport ProfileCard from '../Components/ProfileCard';\nimport { connect } from 'react-redux';\n\nclass UserPage extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      user: undefined,\n      userNotFound: false,\n      isLoadingUser: false,\n      inEditMode: false\n    };\n\n    this.componentDidMount = () => {\n      this.loadUser();\n    };\n\n    this.loadUser = () => {\n      const username = this.props.match.params.username;\n\n      if (!username) {\n        return;\n      }\n\n      this.setState({\n        userNotFound: false,\n        isLoadingUser: true\n      });\n      apiCalls.getUser(username).then(response => {\n        this.setState({\n          user: response.data,\n          isLoadingUser: false\n        });\n      }).catch(error => {\n        this.setState({\n          userNotFound: true,\n          isLoadingUser: false\n        });\n      });\n    };\n\n    this.componentDidUpdate = prevProps => {\n      if (prevProps.match.params.username !== this.props.match.params.username) {\n        this.loadUser();\n      }\n    };\n\n    this.onClickEdit = () => {\n      this.setState({\n        inEditMode: true\n      });\n    };\n  }\n\n  render() {\n    let pageContent;\n\n    if (this.state.isLoadingUser) {\n      pageContent = React.createElement(\"div\", {\n        className: \"d-flex\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 49\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"spinner-border m-auto\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 50\n        },\n        __self: this\n      }, React.createElement(\"span\", {\n        className: \"sr-only\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 51\n        },\n        __self: this\n      }, \"Loading...\")));\n    } else if (this.state.userNotFound) {\n      pageContent = React.createElement(\"div\", {\n        className: \"alert alert-danger text-center\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 57\n        },\n        __self: this\n      }, React.createElement(\"h5\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 58\n        },\n        __self: this\n      }, \"User not found\"));\n    } else {\n      const isEditable = this.props.loggedInUser.username === this.props.match.params.username;\n      pageContent = this.state.user && React.createElement(ProfileCard, {\n        user: this.state.user,\n        isEditable: isEditable,\n        inEditMode: this.state.inEditMode,\n        onClickEdit: this.onClickEdit,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 64\n        },\n        __self: this\n      });\n    }\n\n    return React.createElement(\"div\", {\n      \"data-testid\": \"userpage\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72\n      },\n      __self: this\n    }, pageContent);\n  }\n\n}\n\nUserPage.defaultProps = {\n  match: {\n    params: {}\n  }\n};\n\nconst mapStateToProps = state => {\n  return {\n    loggedInUser: state\n  };\n};\n\nexport default connect(mapStateToProps)(UserPage);","map":{"version":3,"sources":["U:/Java/WaverApp/frontend/src/Pages/UserPage.js"],"names":["React","apiCalls","ProfileCard","connect","UserPage","Component","state","user","undefined","userNotFound","isLoadingUser","inEditMode","componentDidMount","loadUser","username","props","match","params","setState","getUser","then","response","data","catch","error","componentDidUpdate","prevProps","onClickEdit","render","pageContent","isEditable","loggedInUser","defaultProps","mapStateToProps"],"mappings":"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","sourcesContent":["import React from 'react';\r\n\r\nimport * as apiCalls from '../api/apiCalls';\r\nimport ProfileCard from '../Components/ProfileCard';\r\nimport { connect } from 'react-redux';\r\n\r\nclass UserPage extends React.Component {\r\n    \r\n    state = {\r\n        user: undefined,\r\n        userNotFound: false,\r\n        isLoadingUser: false,\r\n        inEditMode: false,\r\n    }\r\n\r\n    componentDidMount = () => {\r\n        this.loadUser();\r\n    }\r\n\r\n    loadUser = () =>{\r\n        const username = this.props.match.params.username;\r\n        if (!username){\r\n            return;\r\n        }\r\n        this.setState({userNotFound: false, isLoadingUser: true})\r\n        apiCalls.getUser(username)\r\n            .then((response) => {\r\n                this.setState({user: response.data, isLoadingUser: false})\r\n            })\r\n            .catch(error => {\r\n                this.setState({userNotFound: true, isLoadingUser: false})\r\n            });\r\n    }\r\n    componentDidUpdate = (prevProps) => {\r\n        if(prevProps.match.params.username !== this.props.match.params.username){\r\n            this.loadUser();\r\n        }\r\n    }\r\n\r\n    onClickEdit = () => {\r\n        this.setState({inEditMode:true});\r\n    }\r\n\r\n    render(){\r\n        let pageContent;\r\n\r\n        if(this.state.isLoadingUser){\r\n            pageContent = (\r\n                <div className = \"d-flex\">\r\n                    <div className = \"spinner-border m-auto\">\r\n                        <span className = \"sr-only\">Loading...</span>\r\n                    </div>\r\n                </div>\r\n            );\r\n        } else if (this.state.userNotFound){\r\n            pageContent = (\r\n                <div className = \"alert alert-danger text-center\">\r\n                    <h5>User not found</h5>\r\n                </div>\r\n            );\r\n        } else {\r\n            const isEditable = this.props.loggedInUser.username === this.props.match.params.username;\r\n            pageContent = this.state.user && \r\n            <ProfileCard \r\n                user = {this.state.user} \r\n                isEditable = {isEditable} \r\n                inEditMode ={this.state.inEditMode}\r\n                onClickEdit = {this.onClickEdit}\r\n            />;\r\n        }\r\n        return(\r\n            <div data-testid = \"userpage\">\r\n                {pageContent}\r\n            </div>\r\n        );\r\n    };\r\n}\r\n\r\nUserPage.defaultProps = {\r\n    match: {\r\n        params: {}\r\n    }\r\n};\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        loggedInUser: state\r\n    }\r\n};\r\n\r\nexport default connect(mapStateToProps)(UserPage);"]},"metadata":{},"sourceType":"module"}