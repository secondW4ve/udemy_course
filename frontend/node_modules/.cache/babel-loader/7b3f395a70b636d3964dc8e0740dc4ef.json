{"ast":null,"code":"import { applyMiddleware, createStore } from \"redux\";\nimport thunk from \"redux-thunk\";\nimport logger from 'redux-logger';\nimport authReducer from \"./authReducer\";\nimport * as apiCalls from '../api/apiCalls';\n\nconst configureStore = (addLogged = true) => {\n  let localStorageData = localStorage.getItem('wave-auth');\n  let persistedState = {\n    id: 0,\n    username: '',\n    displayName: '',\n    image: '',\n    password: '',\n    isLoggedIn: false\n  };\n\n  if (localStorageData) {\n    try {\n      persistedState = JSON.parse(localStorageData);\n      apiCalls.setAuthorizationHeader(persistedState);\n    } catch (error) {}\n  }\n\n  const middleware = addLogged ? applyMiddleware(thunk, logger) : applyMiddleware(thunk);\n  const store = createStore(authReducer, persistedState, middleware);\n  store.subscribe(() => {\n    localStorage.setItem('wave-auth', JSON.stringify(store.getState()));\n    apiCalls.setAuthorizationHeader(store.getState());\n  });\n  return store;\n};\n\nexport default configureStore;","map":{"version":3,"sources":["U:/Java/WaverApp/frontend/src/Redux/configureStore.js"],"names":["applyMiddleware","createStore","thunk","logger","authReducer","apiCalls","configureStore","addLogged","localStorageData","localStorage","getItem","persistedState","id","username","displayName","image","password","isLoggedIn","JSON","parse","setAuthorizationHeader","error","middleware","store","subscribe","setItem","stringify","getState"],"mappings":"AAAA,SAASA,eAAT,EAA0BC,WAA1B,QAA6C,OAA7C;AACA,OAAOC,KAAP,MAAkB,aAAlB;AACA,OAAOC,MAAP,MAAmB,cAAnB;AACA,OAAOC,WAAP,MAAwB,eAAxB;AACA,OAAO,KAAKC,QAAZ,MAA0B,iBAA1B;;AAEA,MAAMC,cAAc,GAAG,CAACC,SAAS,GAAG,IAAb,KAAqB;AACxC,MAAIC,gBAAgB,GAAGC,YAAY,CAACC,OAAb,CAAqB,WAArB,CAAvB;AACA,MAAIC,cAAc,GAAG;AACjBC,IAAAA,EAAE,EAAE,CADa;AAEjBC,IAAAA,QAAQ,EAAE,EAFO;AAGjBC,IAAAA,WAAW,EAAE,EAHI;AAIjBC,IAAAA,KAAK,EAAE,EAJU;AAKjBC,IAAAA,QAAQ,EAAE,EALO;AAMjBC,IAAAA,UAAU,EAAE;AANK,GAArB;;AAQA,MAAIT,gBAAJ,EAAqB;AACjB,QAAG;AACCG,MAAAA,cAAc,GAAGO,IAAI,CAACC,KAAL,CAAWX,gBAAX,CAAjB;AACAH,MAAAA,QAAQ,CAACe,sBAAT,CAAgCT,cAAhC;AACH,KAHD,CAGE,OAAMU,KAAN,EAAa,CAAE;AACpB;;AAED,QAAMC,UAAU,GAAGf,SAAS,GACtBP,eAAe,CAACE,KAAD,EAAQC,MAAR,CADO,GAEtBH,eAAe,CAACE,KAAD,CAFrB;AAGA,QAAMqB,KAAK,GAAGtB,WAAW,CAACG,WAAD,EAAcO,cAAd,EAA8BW,UAA9B,CAAzB;AAEAC,EAAAA,KAAK,CAACC,SAAN,CAAgB,MAAM;AAClBf,IAAAA,YAAY,CAACgB,OAAb,CAAqB,WAArB,EAAkCP,IAAI,CAACQ,SAAL,CAAeH,KAAK,CAACI,QAAN,EAAf,CAAlC;AACAtB,IAAAA,QAAQ,CAACe,sBAAT,CAAgCG,KAAK,CAACI,QAAN,EAAhC;AACH,GAHD;AAIA,SAAOJ,KAAP;AACH,CA3BD;;AA6BA,eAAejB,cAAf","sourcesContent":["import { applyMiddleware, createStore } from \"redux\";\r\nimport thunk from \"redux-thunk\";\r\nimport logger from 'redux-logger';\r\nimport authReducer from \"./authReducer\";\r\nimport * as apiCalls from '../api/apiCalls';\r\n\r\nconst configureStore = (addLogged = true) =>{\r\n    let localStorageData = localStorage.getItem('wave-auth');\r\n    let persistedState = {\r\n        id: 0,\r\n        username: '',\r\n        displayName: '',\r\n        image: '',\r\n        password: '',\r\n        isLoggedIn: false,\r\n    }\r\n    if (localStorageData){\r\n        try{\r\n            persistedState = JSON.parse(localStorageData);\r\n            apiCalls.setAuthorizationHeader(persistedState);\r\n        } catch(error) {}\r\n    }\r\n\r\n    const middleware = addLogged\r\n        ? applyMiddleware(thunk, logger)\r\n        : applyMiddleware(thunk);\r\n    const store = createStore(authReducer, persistedState, middleware);\r\n\r\n    store.subscribe(() => {\r\n        localStorage.setItem('wave-auth', JSON.stringify(store.getState()));\r\n        apiCalls.setAuthorizationHeader(store.getState());\r\n    });\r\n    return store;\r\n}\r\n\r\nexport default configureStore;"]},"metadata":{},"sourceType":"module"}